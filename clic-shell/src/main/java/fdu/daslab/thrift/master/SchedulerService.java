/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fdu.daslab.thrift.master;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-10-27")
public class SchedulerService {

  public interface Iface {

    public fdu.daslab.thrift.base.ServiceBaseResult postStageStarted(String stageId, java.util.Map<String, String> submitMsg) throws org.apache.thrift.TException;

    public fdu.daslab.thrift.base.ServiceBaseResult postDataPrepared(String stageId) throws org.apache.thrift.TException;

    public fdu.daslab.thrift.base.ServiceBaseResult postStageCompleted(String stageId, java.util.Map<String, String> submitMsg) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void postStageStarted(String stageId, java.util.Map<String, String> submitMsg, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException;

    public void postDataPrepared(String stageId, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException;

    public void postStageCompleted(String stageId, java.util.Map<String, String> submitMsg, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public fdu.daslab.thrift.base.ServiceBaseResult postStageStarted(String stageId, java.util.Map<String, String> submitMsg) throws org.apache.thrift.TException
    {
      send_postStageStarted(stageId, submitMsg);
      return recv_postStageStarted();
    }

    public void send_postStageStarted(String stageId, java.util.Map<String, String> submitMsg) throws org.apache.thrift.TException
    {
      postStageStarted_args args = new postStageStarted_args();
      args.setStageId(stageId);
      args.setSubmitMsg(submitMsg);
      sendBase("postStageStarted", args);
    }

    public fdu.daslab.thrift.base.ServiceBaseResult recv_postStageStarted() throws org.apache.thrift.TException
    {
      postStageStarted_result result = new postStageStarted_result();
      receiveBase(result, "postStageStarted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postStageStarted failed: unknown result");
    }

    public fdu.daslab.thrift.base.ServiceBaseResult postDataPrepared(String stageId) throws org.apache.thrift.TException
    {
      send_postDataPrepared(stageId);
      return recv_postDataPrepared();
    }

    public void send_postDataPrepared(String stageId) throws org.apache.thrift.TException
    {
      postDataPrepared_args args = new postDataPrepared_args();
      args.setStageId(stageId);
      sendBase("postDataPrepared", args);
    }

    public fdu.daslab.thrift.base.ServiceBaseResult recv_postDataPrepared() throws org.apache.thrift.TException
    {
      postDataPrepared_result result = new postDataPrepared_result();
      receiveBase(result, "postDataPrepared");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postDataPrepared failed: unknown result");
    }

    public fdu.daslab.thrift.base.ServiceBaseResult postStageCompleted(String stageId, java.util.Map<String, String> submitMsg) throws org.apache.thrift.TException
    {
      send_postStageCompleted(stageId, submitMsg);
      return recv_postStageCompleted();
    }

    public void send_postStageCompleted(String stageId, java.util.Map<String, String> submitMsg) throws org.apache.thrift.TException
    {
      postStageCompleted_args args = new postStageCompleted_args();
      args.setStageId(stageId);
      args.setSubmitMsg(submitMsg);
      sendBase("postStageCompleted", args);
    }

    public fdu.daslab.thrift.base.ServiceBaseResult recv_postStageCompleted() throws org.apache.thrift.TException
    {
      postStageCompleted_result result = new postStageCompleted_result();
      receiveBase(result, "postStageCompleted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postStageCompleted failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void postStageStarted(String stageId, java.util.Map<String, String> submitMsg, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postStageStarted_call method_call = new postStageStarted_call(stageId, submitMsg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postStageStarted_call extends org.apache.thrift.async.TAsyncMethodCall<fdu.daslab.thrift.base.ServiceBaseResult> {
      private String stageId;
      private java.util.Map<String, String> submitMsg;
      public postStageStarted_call(String stageId, java.util.Map<String, String> submitMsg, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stageId = stageId;
        this.submitMsg = submitMsg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postStageStarted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postStageStarted_args args = new postStageStarted_args();
        args.setStageId(stageId);
        args.setSubmitMsg(submitMsg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public fdu.daslab.thrift.base.ServiceBaseResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postStageStarted();
      }
    }

    public void postDataPrepared(String stageId, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postDataPrepared_call method_call = new postDataPrepared_call(stageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postDataPrepared_call extends org.apache.thrift.async.TAsyncMethodCall<fdu.daslab.thrift.base.ServiceBaseResult> {
      private String stageId;
      public postDataPrepared_call(String stageId, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stageId = stageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postDataPrepared", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postDataPrepared_args args = new postDataPrepared_args();
        args.setStageId(stageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public fdu.daslab.thrift.base.ServiceBaseResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postDataPrepared();
      }
    }

    public void postStageCompleted(String stageId, java.util.Map<String, String> submitMsg, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postStageCompleted_call method_call = new postStageCompleted_call(stageId, submitMsg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postStageCompleted_call extends org.apache.thrift.async.TAsyncMethodCall<fdu.daslab.thrift.base.ServiceBaseResult> {
      private String stageId;
      private java.util.Map<String, String> submitMsg;
      public postStageCompleted_call(String stageId, java.util.Map<String, String> submitMsg, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stageId = stageId;
        this.submitMsg = submitMsg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postStageCompleted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postStageCompleted_args args = new postStageCompleted_args();
        args.setStageId(stageId);
        args.setSubmitMsg(submitMsg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public fdu.daslab.thrift.base.ServiceBaseResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postStageCompleted();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("postStageStarted", new postStageStarted());
      processMap.put("postDataPrepared", new postDataPrepared());
      processMap.put("postStageCompleted", new postStageCompleted());
      return processMap;
    }

    public static class postStageStarted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postStageStarted_args> {
      public postStageStarted() {
        super("postStageStarted");
      }

      public postStageStarted_args getEmptyArgsInstance() {
        return new postStageStarted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public postStageStarted_result getResult(I iface, postStageStarted_args args) throws org.apache.thrift.TException {
        postStageStarted_result result = new postStageStarted_result();
        result.success = iface.postStageStarted(args.stageId, args.submitMsg);
        return result;
      }
    }

    public static class postDataPrepared<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postDataPrepared_args> {
      public postDataPrepared() {
        super("postDataPrepared");
      }

      public postDataPrepared_args getEmptyArgsInstance() {
        return new postDataPrepared_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public postDataPrepared_result getResult(I iface, postDataPrepared_args args) throws org.apache.thrift.TException {
        postDataPrepared_result result = new postDataPrepared_result();
        result.success = iface.postDataPrepared(args.stageId);
        return result;
      }
    }

    public static class postStageCompleted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postStageCompleted_args> {
      public postStageCompleted() {
        super("postStageCompleted");
      }

      public postStageCompleted_args getEmptyArgsInstance() {
        return new postStageCompleted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public postStageCompleted_result getResult(I iface, postStageCompleted_args args) throws org.apache.thrift.TException {
        postStageCompleted_result result = new postStageCompleted_result();
        result.success = iface.postStageCompleted(args.stageId, args.submitMsg);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("postStageStarted", new postStageStarted());
      processMap.put("postDataPrepared", new postDataPrepared());
      processMap.put("postStageCompleted", new postStageCompleted());
      return processMap;
    }

    public static class postStageStarted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postStageStarted_args, fdu.daslab.thrift.base.ServiceBaseResult> {
      public postStageStarted() {
        super("postStageStarted");
      }

      public postStageStarted_args getEmptyArgsInstance() {
        return new postStageStarted_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult>() { 
          public void onComplete(fdu.daslab.thrift.base.ServiceBaseResult o) {
            postStageStarted_result result = new postStageStarted_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postStageStarted_result result = new postStageStarted_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postStageStarted_args args, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException {
        iface.postStageStarted(args.stageId, args.submitMsg,resultHandler);
      }
    }

    public static class postDataPrepared<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postDataPrepared_args, fdu.daslab.thrift.base.ServiceBaseResult> {
      public postDataPrepared() {
        super("postDataPrepared");
      }

      public postDataPrepared_args getEmptyArgsInstance() {
        return new postDataPrepared_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult>() { 
          public void onComplete(fdu.daslab.thrift.base.ServiceBaseResult o) {
            postDataPrepared_result result = new postDataPrepared_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postDataPrepared_result result = new postDataPrepared_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postDataPrepared_args args, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException {
        iface.postDataPrepared(args.stageId,resultHandler);
      }
    }

    public static class postStageCompleted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postStageCompleted_args, fdu.daslab.thrift.base.ServiceBaseResult> {
      public postStageCompleted() {
        super("postStageCompleted");
      }

      public postStageCompleted_args getEmptyArgsInstance() {
        return new postStageCompleted_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult>() { 
          public void onComplete(fdu.daslab.thrift.base.ServiceBaseResult o) {
            postStageCompleted_result result = new postStageCompleted_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postStageCompleted_result result = new postStageCompleted_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postStageCompleted_args args, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.ServiceBaseResult> resultHandler) throws org.apache.thrift.TException {
        iface.postStageCompleted(args.stageId, args.submitMsg,resultHandler);
      }
    }

  }

  public static class postStageStarted_args implements org.apache.thrift.TBase<postStageStarted_args, postStageStarted_args._Fields>, java.io.Serializable, Cloneable, Comparable<postStageStarted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postStageStarted_args");

    private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUBMIT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("submitMsg", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postStageStarted_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postStageStarted_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String stageId; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> submitMsg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STAGE_ID((short)1, "stageId"),
      SUBMIT_MSG((short)2, "submitMsg");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STAGE_ID
            return STAGE_ID;
          case 2: // SUBMIT_MSG
            return SUBMIT_MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBMIT_MSG, new org.apache.thrift.meta_data.FieldMetaData("submitMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postStageStarted_args.class, metaDataMap);
    }

    public postStageStarted_args() {
    }

    public postStageStarted_args(
      String stageId,
      java.util.Map<String, String> submitMsg)
    {
      this();
      this.stageId = stageId;
      this.submitMsg = submitMsg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postStageStarted_args(postStageStarted_args other) {
      if (other.isSetStageId()) {
        this.stageId = other.stageId;
      }
      if (other.isSetSubmitMsg()) {
        java.util.Map<String, String> __this__submitMsg = new java.util.HashMap<String, String>(other.submitMsg);
        this.submitMsg = __this__submitMsg;
      }
    }

    public postStageStarted_args deepCopy() {
      return new postStageStarted_args(this);
    }

    @Override
    public void clear() {
      this.stageId = null;
      this.submitMsg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getStageId() {
      return this.stageId;
    }

    public postStageStarted_args setStageId(@org.apache.thrift.annotation.Nullable String stageId) {
      this.stageId = stageId;
      return this;
    }

    public void unsetStageId() {
      this.stageId = null;
    }

    /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
    public boolean isSetStageId() {
      return this.stageId != null;
    }

    public void setStageIdIsSet(boolean value) {
      if (!value) {
        this.stageId = null;
      }
    }

    public int getSubmitMsgSize() {
      return (this.submitMsg == null) ? 0 : this.submitMsg.size();
    }

    public void putToSubmitMsg(String key, String val) {
      if (this.submitMsg == null) {
        this.submitMsg = new java.util.HashMap<String, String>();
      }
      this.submitMsg.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<String, String> getSubmitMsg() {
      return this.submitMsg;
    }

    public postStageStarted_args setSubmitMsg(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> submitMsg) {
      this.submitMsg = submitMsg;
      return this;
    }

    public void unsetSubmitMsg() {
      this.submitMsg = null;
    }

    /** Returns true if field submitMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetSubmitMsg() {
      return this.submitMsg != null;
    }

    public void setSubmitMsgIsSet(boolean value) {
      if (!value) {
        this.submitMsg = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STAGE_ID:
        if (value == null) {
          unsetStageId();
        } else {
          setStageId((String)value);
        }
        break;

      case SUBMIT_MSG:
        if (value == null) {
          unsetSubmitMsg();
        } else {
          setSubmitMsg((java.util.Map<String, String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STAGE_ID:
        return getStageId();

      case SUBMIT_MSG:
        return getSubmitMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STAGE_ID:
        return isSetStageId();
      case SUBMIT_MSG:
        return isSetSubmitMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postStageStarted_args)
        return this.equals((postStageStarted_args)that);
      return false;
    }

    public boolean equals(postStageStarted_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_stageId = true && this.isSetStageId();
      boolean that_present_stageId = true && that.isSetStageId();
      if (this_present_stageId || that_present_stageId) {
        if (!(this_present_stageId && that_present_stageId))
          return false;
        if (!this.stageId.equals(that.stageId))
          return false;
      }

      boolean this_present_submitMsg = true && this.isSetSubmitMsg();
      boolean that_present_submitMsg = true && that.isSetSubmitMsg();
      if (this_present_submitMsg || that_present_submitMsg) {
        if (!(this_present_submitMsg && that_present_submitMsg))
          return false;
        if (!this.submitMsg.equals(that.submitMsg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStageId()) ? 131071 : 524287);
      if (isSetStageId())
        hashCode = hashCode * 8191 + stageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubmitMsg()) ? 131071 : 524287);
      if (isSetSubmitMsg())
        hashCode = hashCode * 8191 + submitMsg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postStageStarted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStageId()).compareTo(other.isSetStageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, other.stageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubmitMsg()).compareTo(other.isSetSubmitMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubmitMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitMsg, other.submitMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postStageStarted_args(");
      boolean first = true;

      sb.append("stageId:");
      if (this.stageId == null) {
        sb.append("null");
      } else {
        sb.append(this.stageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("submitMsg:");
      if (this.submitMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.submitMsg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postStageStarted_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageStarted_argsStandardScheme getScheme() {
        return new postStageStarted_argsStandardScheme();
      }
    }

    private static class postStageStarted_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postStageStarted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postStageStarted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stageId = iprot.readString();
                struct.setStageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBMIT_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.submitMsg = new java.util.HashMap<String, String>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable String _key1;
                  @org.apache.thrift.annotation.Nullable String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.submitMsg.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSubmitMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postStageStarted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stageId != null) {
          oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
          oprot.writeString(struct.stageId);
          oprot.writeFieldEnd();
        }
        if (struct.submitMsg != null) {
          oprot.writeFieldBegin(SUBMIT_MSG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.submitMsg.size()));
            for (java.util.Map.Entry<String, String> _iter4 : struct.submitMsg.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postStageStarted_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageStarted_argsTupleScheme getScheme() {
        return new postStageStarted_argsTupleScheme();
      }
    }

    private static class postStageStarted_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postStageStarted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postStageStarted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStageId()) {
          optionals.set(0);
        }
        if (struct.isSetSubmitMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStageId()) {
          oprot.writeString(struct.stageId);
        }
        if (struct.isSetSubmitMsg()) {
          {
            oprot.writeI32(struct.submitMsg.size());
            for (java.util.Map.Entry<String, String> _iter5 : struct.submitMsg.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postStageStarted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stageId = iprot.readString();
          struct.setStageIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.submitMsg = new java.util.HashMap<String, String>(2*_map6.size);
            @org.apache.thrift.annotation.Nullable String _key7;
            @org.apache.thrift.annotation.Nullable String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.submitMsg.put(_key7, _val8);
            }
          }
          struct.setSubmitMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postStageStarted_result implements org.apache.thrift.TBase<postStageStarted_result, postStageStarted_result._Fields>, java.io.Serializable, Cloneable, Comparable<postStageStarted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postStageStarted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postStageStarted_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postStageStarted_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.ServiceBaseResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.ServiceBaseResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postStageStarted_result.class, metaDataMap);
    }

    public postStageStarted_result() {
    }

    public postStageStarted_result(
      fdu.daslab.thrift.base.ServiceBaseResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postStageStarted_result(postStageStarted_result other) {
      if (other.isSetSuccess()) {
        this.success = new fdu.daslab.thrift.base.ServiceBaseResult(other.success);
      }
    }

    public postStageStarted_result deepCopy() {
      return new postStageStarted_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.ServiceBaseResult getSuccess() {
      return this.success;
    }

    public postStageStarted_result setSuccess(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.ServiceBaseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((fdu.daslab.thrift.base.ServiceBaseResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postStageStarted_result)
        return this.equals((postStageStarted_result)that);
      return false;
    }

    public boolean equals(postStageStarted_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postStageStarted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postStageStarted_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postStageStarted_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageStarted_resultStandardScheme getScheme() {
        return new postStageStarted_resultStandardScheme();
      }
    }

    private static class postStageStarted_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postStageStarted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postStageStarted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new fdu.daslab.thrift.base.ServiceBaseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postStageStarted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postStageStarted_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageStarted_resultTupleScheme getScheme() {
        return new postStageStarted_resultTupleScheme();
      }
    }

    private static class postStageStarted_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postStageStarted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postStageStarted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postStageStarted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new fdu.daslab.thrift.base.ServiceBaseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postDataPrepared_args implements org.apache.thrift.TBase<postDataPrepared_args, postDataPrepared_args._Fields>, java.io.Serializable, Cloneable, Comparable<postDataPrepared_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postDataPrepared_args");

    private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postDataPrepared_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postDataPrepared_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String stageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STAGE_ID((short)1, "stageId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STAGE_ID
            return STAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postDataPrepared_args.class, metaDataMap);
    }

    public postDataPrepared_args() {
    }

    public postDataPrepared_args(
      String stageId)
    {
      this();
      this.stageId = stageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postDataPrepared_args(postDataPrepared_args other) {
      if (other.isSetStageId()) {
        this.stageId = other.stageId;
      }
    }

    public postDataPrepared_args deepCopy() {
      return new postDataPrepared_args(this);
    }

    @Override
    public void clear() {
      this.stageId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getStageId() {
      return this.stageId;
    }

    public postDataPrepared_args setStageId(@org.apache.thrift.annotation.Nullable String stageId) {
      this.stageId = stageId;
      return this;
    }

    public void unsetStageId() {
      this.stageId = null;
    }

    /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
    public boolean isSetStageId() {
      return this.stageId != null;
    }

    public void setStageIdIsSet(boolean value) {
      if (!value) {
        this.stageId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STAGE_ID:
        if (value == null) {
          unsetStageId();
        } else {
          setStageId((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STAGE_ID:
        return getStageId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STAGE_ID:
        return isSetStageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postDataPrepared_args)
        return this.equals((postDataPrepared_args)that);
      return false;
    }

    public boolean equals(postDataPrepared_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_stageId = true && this.isSetStageId();
      boolean that_present_stageId = true && that.isSetStageId();
      if (this_present_stageId || that_present_stageId) {
        if (!(this_present_stageId && that_present_stageId))
          return false;
        if (!this.stageId.equals(that.stageId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStageId()) ? 131071 : 524287);
      if (isSetStageId())
        hashCode = hashCode * 8191 + stageId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postDataPrepared_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStageId()).compareTo(other.isSetStageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, other.stageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postDataPrepared_args(");
      boolean first = true;

      sb.append("stageId:");
      if (this.stageId == null) {
        sb.append("null");
      } else {
        sb.append(this.stageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postDataPrepared_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postDataPrepared_argsStandardScheme getScheme() {
        return new postDataPrepared_argsStandardScheme();
      }
    }

    private static class postDataPrepared_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postDataPrepared_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postDataPrepared_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stageId = iprot.readString();
                struct.setStageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postDataPrepared_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stageId != null) {
          oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
          oprot.writeString(struct.stageId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postDataPrepared_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postDataPrepared_argsTupleScheme getScheme() {
        return new postDataPrepared_argsTupleScheme();
      }
    }

    private static class postDataPrepared_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postDataPrepared_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postDataPrepared_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStageId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStageId()) {
          oprot.writeString(struct.stageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postDataPrepared_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stageId = iprot.readString();
          struct.setStageIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postDataPrepared_result implements org.apache.thrift.TBase<postDataPrepared_result, postDataPrepared_result._Fields>, java.io.Serializable, Cloneable, Comparable<postDataPrepared_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postDataPrepared_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postDataPrepared_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postDataPrepared_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.ServiceBaseResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.ServiceBaseResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postDataPrepared_result.class, metaDataMap);
    }

    public postDataPrepared_result() {
    }

    public postDataPrepared_result(
      fdu.daslab.thrift.base.ServiceBaseResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postDataPrepared_result(postDataPrepared_result other) {
      if (other.isSetSuccess()) {
        this.success = new fdu.daslab.thrift.base.ServiceBaseResult(other.success);
      }
    }

    public postDataPrepared_result deepCopy() {
      return new postDataPrepared_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.ServiceBaseResult getSuccess() {
      return this.success;
    }

    public postDataPrepared_result setSuccess(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.ServiceBaseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((fdu.daslab.thrift.base.ServiceBaseResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postDataPrepared_result)
        return this.equals((postDataPrepared_result)that);
      return false;
    }

    public boolean equals(postDataPrepared_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postDataPrepared_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postDataPrepared_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postDataPrepared_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postDataPrepared_resultStandardScheme getScheme() {
        return new postDataPrepared_resultStandardScheme();
      }
    }

    private static class postDataPrepared_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postDataPrepared_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postDataPrepared_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new fdu.daslab.thrift.base.ServiceBaseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postDataPrepared_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postDataPrepared_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postDataPrepared_resultTupleScheme getScheme() {
        return new postDataPrepared_resultTupleScheme();
      }
    }

    private static class postDataPrepared_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postDataPrepared_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postDataPrepared_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postDataPrepared_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new fdu.daslab.thrift.base.ServiceBaseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postStageCompleted_args implements org.apache.thrift.TBase<postStageCompleted_args, postStageCompleted_args._Fields>, java.io.Serializable, Cloneable, Comparable<postStageCompleted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postStageCompleted_args");

    private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUBMIT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("submitMsg", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postStageCompleted_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postStageCompleted_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String stageId; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> submitMsg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STAGE_ID((short)1, "stageId"),
      SUBMIT_MSG((short)2, "submitMsg");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STAGE_ID
            return STAGE_ID;
          case 2: // SUBMIT_MSG
            return SUBMIT_MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBMIT_MSG, new org.apache.thrift.meta_data.FieldMetaData("submitMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postStageCompleted_args.class, metaDataMap);
    }

    public postStageCompleted_args() {
    }

    public postStageCompleted_args(
      String stageId,
      java.util.Map<String, String> submitMsg)
    {
      this();
      this.stageId = stageId;
      this.submitMsg = submitMsg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postStageCompleted_args(postStageCompleted_args other) {
      if (other.isSetStageId()) {
        this.stageId = other.stageId;
      }
      if (other.isSetSubmitMsg()) {
        java.util.Map<String, String> __this__submitMsg = new java.util.HashMap<String, String>(other.submitMsg);
        this.submitMsg = __this__submitMsg;
      }
    }

    public postStageCompleted_args deepCopy() {
      return new postStageCompleted_args(this);
    }

    @Override
    public void clear() {
      this.stageId = null;
      this.submitMsg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getStageId() {
      return this.stageId;
    }

    public postStageCompleted_args setStageId(@org.apache.thrift.annotation.Nullable String stageId) {
      this.stageId = stageId;
      return this;
    }

    public void unsetStageId() {
      this.stageId = null;
    }

    /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
    public boolean isSetStageId() {
      return this.stageId != null;
    }

    public void setStageIdIsSet(boolean value) {
      if (!value) {
        this.stageId = null;
      }
    }

    public int getSubmitMsgSize() {
      return (this.submitMsg == null) ? 0 : this.submitMsg.size();
    }

    public void putToSubmitMsg(String key, String val) {
      if (this.submitMsg == null) {
        this.submitMsg = new java.util.HashMap<String, String>();
      }
      this.submitMsg.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<String, String> getSubmitMsg() {
      return this.submitMsg;
    }

    public postStageCompleted_args setSubmitMsg(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> submitMsg) {
      this.submitMsg = submitMsg;
      return this;
    }

    public void unsetSubmitMsg() {
      this.submitMsg = null;
    }

    /** Returns true if field submitMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetSubmitMsg() {
      return this.submitMsg != null;
    }

    public void setSubmitMsgIsSet(boolean value) {
      if (!value) {
        this.submitMsg = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STAGE_ID:
        if (value == null) {
          unsetStageId();
        } else {
          setStageId((String)value);
        }
        break;

      case SUBMIT_MSG:
        if (value == null) {
          unsetSubmitMsg();
        } else {
          setSubmitMsg((java.util.Map<String, String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STAGE_ID:
        return getStageId();

      case SUBMIT_MSG:
        return getSubmitMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STAGE_ID:
        return isSetStageId();
      case SUBMIT_MSG:
        return isSetSubmitMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postStageCompleted_args)
        return this.equals((postStageCompleted_args)that);
      return false;
    }

    public boolean equals(postStageCompleted_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_stageId = true && this.isSetStageId();
      boolean that_present_stageId = true && that.isSetStageId();
      if (this_present_stageId || that_present_stageId) {
        if (!(this_present_stageId && that_present_stageId))
          return false;
        if (!this.stageId.equals(that.stageId))
          return false;
      }

      boolean this_present_submitMsg = true && this.isSetSubmitMsg();
      boolean that_present_submitMsg = true && that.isSetSubmitMsg();
      if (this_present_submitMsg || that_present_submitMsg) {
        if (!(this_present_submitMsg && that_present_submitMsg))
          return false;
        if (!this.submitMsg.equals(that.submitMsg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStageId()) ? 131071 : 524287);
      if (isSetStageId())
        hashCode = hashCode * 8191 + stageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubmitMsg()) ? 131071 : 524287);
      if (isSetSubmitMsg())
        hashCode = hashCode * 8191 + submitMsg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postStageCompleted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStageId()).compareTo(other.isSetStageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, other.stageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubmitMsg()).compareTo(other.isSetSubmitMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubmitMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitMsg, other.submitMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postStageCompleted_args(");
      boolean first = true;

      sb.append("stageId:");
      if (this.stageId == null) {
        sb.append("null");
      } else {
        sb.append(this.stageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("submitMsg:");
      if (this.submitMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.submitMsg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postStageCompleted_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageCompleted_argsStandardScheme getScheme() {
        return new postStageCompleted_argsStandardScheme();
      }
    }

    private static class postStageCompleted_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postStageCompleted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postStageCompleted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stageId = iprot.readString();
                struct.setStageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBMIT_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.submitMsg = new java.util.HashMap<String, String>(2*_map10.size);
                  @org.apache.thrift.annotation.Nullable String _key11;
                  @org.apache.thrift.annotation.Nullable String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.submitMsg.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setSubmitMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postStageCompleted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stageId != null) {
          oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
          oprot.writeString(struct.stageId);
          oprot.writeFieldEnd();
        }
        if (struct.submitMsg != null) {
          oprot.writeFieldBegin(SUBMIT_MSG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.submitMsg.size()));
            for (java.util.Map.Entry<String, String> _iter14 : struct.submitMsg.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postStageCompleted_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageCompleted_argsTupleScheme getScheme() {
        return new postStageCompleted_argsTupleScheme();
      }
    }

    private static class postStageCompleted_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postStageCompleted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postStageCompleted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStageId()) {
          optionals.set(0);
        }
        if (struct.isSetSubmitMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStageId()) {
          oprot.writeString(struct.stageId);
        }
        if (struct.isSetSubmitMsg()) {
          {
            oprot.writeI32(struct.submitMsg.size());
            for (java.util.Map.Entry<String, String> _iter15 : struct.submitMsg.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postStageCompleted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stageId = iprot.readString();
          struct.setStageIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.submitMsg = new java.util.HashMap<String, String>(2*_map16.size);
            @org.apache.thrift.annotation.Nullable String _key17;
            @org.apache.thrift.annotation.Nullable String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.submitMsg.put(_key17, _val18);
            }
          }
          struct.setSubmitMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postStageCompleted_result implements org.apache.thrift.TBase<postStageCompleted_result, postStageCompleted_result._Fields>, java.io.Serializable, Cloneable, Comparable<postStageCompleted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postStageCompleted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postStageCompleted_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postStageCompleted_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.ServiceBaseResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.ServiceBaseResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postStageCompleted_result.class, metaDataMap);
    }

    public postStageCompleted_result() {
    }

    public postStageCompleted_result(
      fdu.daslab.thrift.base.ServiceBaseResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postStageCompleted_result(postStageCompleted_result other) {
      if (other.isSetSuccess()) {
        this.success = new fdu.daslab.thrift.base.ServiceBaseResult(other.success);
      }
    }

    public postStageCompleted_result deepCopy() {
      return new postStageCompleted_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.ServiceBaseResult getSuccess() {
      return this.success;
    }

    public postStageCompleted_result setSuccess(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.ServiceBaseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((fdu.daslab.thrift.base.ServiceBaseResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postStageCompleted_result)
        return this.equals((postStageCompleted_result)that);
      return false;
    }

    public boolean equals(postStageCompleted_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postStageCompleted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postStageCompleted_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postStageCompleted_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageCompleted_resultStandardScheme getScheme() {
        return new postStageCompleted_resultStandardScheme();
      }
    }

    private static class postStageCompleted_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postStageCompleted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postStageCompleted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new fdu.daslab.thrift.base.ServiceBaseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postStageCompleted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postStageCompleted_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postStageCompleted_resultTupleScheme getScheme() {
        return new postStageCompleted_resultTupleScheme();
      }
    }

    private static class postStageCompleted_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postStageCompleted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postStageCompleted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postStageCompleted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new fdu.daslab.thrift.base.ServiceBaseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
